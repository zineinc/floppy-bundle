{% block storage_file_row %}
    {{ form_row(form) }}
    {{ block("storage_file_javascript", form.vars ) }}
{% endblock %}

{% block storage_file_widget %}
    <div id="storage-file-box{{ id }}" class="storage-file-box">
        <div class="error-message"></div>
        {% if data and data.id %}
            <div id="storage-preview-{{ id }}">
                {{ storage_file_preview(data) }}
            </div>
            <input id="{{ id }}-id" type="hidden" value="{{ data.id }}" name="{{ full_name }}[id]" />
        {% else %}
            <div id="storage-preview-{{ id }}"></div>
            <input type="hidden" id="{{ id }}-id" value="" name="{{ full_name }}[id]" />
        {% endif %}
        <input type="hidden" id="{{ id }}-attributes" value="{% if data.attributes.all %}{{ data.attributes.all|json_encode }}{% endif %}" name="{{ full_name }}[attributes]" />

        <button id="storage-file-button-{{ id }}" class="primary">{{ "upload"|trans }}</button>
        <div id="storage-uploading-file-{{id}}" class="storage-uploading">
            <div class="js-name"></div>
            <div class="storage-file-progress-holder">
                <div class="js-bar bar"></div>
            </div>
            <span class="js-stop stop">{{ "x"|trans }}</span>
        </div>
    </div>

{% endblock %}

{% block storage_file_javascript %}
    <script type="text/javascript">
        $(function(){
            if(typeof(plupload) == "undefined") {
                throw "plupload library is missing. You should include plupload script into your layout.";
            }

            if(typeof(StorageFileFormType) == "undefined") {
                throw "StorageFileFormType javascript is missing. You should include this script into your layout.";
            }

            var uploadingFileBox = $("#storage-uploading-file-{{id}}");
            var idInput = $("#{{ id }}-id");
            var attributesInput = $("#{{ id }}-attributes");
            var preview = $("#storage-preview-{{ id }}");
            var box = $("#storage-file-box{{ id }}");
            var errorBox = box.find(".error-message");

            var errorMessages = {
                "unsupported-file-type": "{{ "storage.file.error.unsupported_file_type" }}",
                "file-not-found": "{{ "storage.file.error.file_not_found" }}",
                "store-error": "{{ "storage.file.error.store_error" }}",
                "io": "{{ "storage.file.error.io" }}",
                "file-process-error": "{{ "storage.file.error.file_process_error" }}",
                "invalid-checksum": "{{ "storage.file.error.invalid_checksum" }}",
                "access-denied": "{{ "storage.file.error.access_denied" }}"
            };

            var pluploader;
            var uploader = {
                start: function(){
                    pluploader.start();
                },
                stop: function(file){
                    pluploader.removeFile(pluploader.getFile(file.id()));
                }
            };

            var eventBus = new StorageFileFormType.EventBus();

            var view = new StorageFileFormType.View({
                eventBus: eventBus,
                box: box,
                previewBox: preview,
                errorBox: errorBox,
                attributesInput: attributesInput,
                idInput: idInput,
                uploadingFileBox: uploadingFileBox
            });

            var controller = new StorageFileFormType.Controller({
                eventBus: eventBus,
                uploader: uploader,
                view: view,
                errorMessages: errorMessages,
                previewUrl: "{{ url("storageFilePreview") }}"
            });

            pluploader = new plupload.Uploader({
                runtimes: 'html5,flash,silverlight,html4',
                flash_swf_url : '{{ swf }}',
                silverlight_xap_url : '{{ xap }}',
                browse_button: 'storage-file-button-{{ id }}',
                container: 'storage-file-box{{ id }}',
                multi_selection: false,
                url: '{{ url }}',
                file_data_name: '{{ file_key }}',
                filters: {
                    mime_types: [
                        {% for fileType in file_types %}
                        { title: "{{ fileType.name|trans|e("js") }}", extensions: "{{ fileType.extensions|join(",")|e("js") }}"}{% if not loop.last %},{% endif %}
                        {% endfor %}
                    ]
                },
                init: {
                    FilesAdded: function(up, files) {
                        controller.onFileAdded(new StorageFileFormType.File(files[0].id, files[0].name));
                    },

                    UploadProgress: function(up, file) {
                        controller.onProgress(file.percent);
                    },

                    Error: function(up, response) {
                        controller.onError(response.response ? response.response : response);
                    },

                    FileUploaded: function(up, file, response) {
                        controller.onSuccess(response.response);
                    }
                }
            });

            pluploader.init();
        });
    </script>
{% endblock %}